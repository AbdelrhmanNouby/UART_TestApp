
UART_TestApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a28  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000718  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000062b  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000430  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000467  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 33 01 	jmp	0x266	; 0x266 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
/*
 * ECHO app repeat what you sent by terminal 
*/

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	da 95       	dec	r29
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
	UART_u8Init();					// initialize UART comm
  90:	0e 94 c4 00 	call	0x188	; 0x188 <UART_u8Init>
	TIMER0_u8Init();				// initialize TIMER0 to use delay 
  94:	0e 94 58 00 	call	0xb0	; 0xb0 <TIMER0_u8Init>
	uint8_t R_Str [256] ;			// array to contain received string 
    while (1) 
    {
		UART_u8ReceiveString(R_Str);				// receive string from terminal
  98:	ce 01       	movw	r24, r28
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	0e 94 10 01 	call	0x220	; 0x220 <UART_u8ReceiveString>
		UART_u8SendString(R_Str);					// send that received string 
  a0:	ce 01       	movw	r24, r28
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <UART_u8SendString>
		UART_u8SendByte(NEWLINE);					// print newline 
  a8:	8d e0       	ldi	r24, 0x0D	; 13
  aa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_u8SendByte>
  ae:	f4 cf       	rjmp	.-24     	; 0x98 <main+0x1c>

000000b0 <TIMER0_u8Init>:
		TIMER0_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	8f 7b       	andi	r24, 0xBF	; 191
  b4:	83 bf       	out	0x33, r24	; 51
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	83 bf       	out	0x33, r24	; 51
  bc:	8f b7       	in	r24, 0x3f	; 63
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8f bf       	out	0x3f, r24	; 63
  c2:	89 b7       	in	r24, 0x39	; 57
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	89 bf       	out	0x39, r24	; 57
  c8:	03 b6       	in	r0, 0x33	; 51
  ca:	06 fc       	sbrc	r0, 6
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <TIMER0_u8Init+0x34>
  ce:	03 b6       	in	r0, 0x33	; 51
  d0:	03 fe       	sbrs	r0, 3
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <TIMER0_u8Init+0x38>
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	07 fe       	sbrs	r0, 7
  d8:	09 c0       	rjmp	.+18     	; 0xec <TIMER0_u8Init+0x3c>
  da:	09 b6       	in	r0, 0x39	; 57
  dc:	01 fc       	sbrc	r0, 1
  de:	08 c0       	rjmp	.+16     	; 0xf0 <TIMER0_u8Init+0x40>
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	08 95       	ret
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	08 95       	ret
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	08 95       	ret
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	08 95       	ret
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret

000000f4 <__vector_10>:

// ISR 
void __vector_10(void)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 116:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <counter>
 11a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <counter+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <counter+0x1>
 124:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 128:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <counter>
 12c:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <counter+0x1>
 130:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <compare>
 134:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <compare+0x1>
 138:	28 17       	cp	r18, r24
 13a:	39 07       	cpc	r19, r25
 13c:	a1 f4       	brne	.+40     	; 0x166 <__vector_10+0x72>
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 142:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 146:	89 2b       	or	r24, r25
 148:	71 f0       	breq	.+28     	; 0x166 <__vector_10+0x72>
	{
		counter = 0;
 14a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <counter+0x1>
 14e:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter>
		CLR_BIT(TIMSK_REG, OCIE0);							// reset interrupt 
 152:	89 b7       	in	r24, 0x39	; 57
 154:	8d 7f       	andi	r24, 0xFD	; 253
 156:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 158:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <delay_state>
		delayCallBack();									// call the function 
 15c:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 164:	09 95       	icall
	}
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	7f 91       	pop	r23
 174:	6f 91       	pop	r22
 176:	5f 91       	pop	r21
 178:	4f 91       	pop	r20
 17a:	3f 91       	pop	r19
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <UART_u8Init>:
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
 188:	8a b1       	in	r24, 0x0a	; 10
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	8a b9       	out	0x0a, r24	; 10
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
 18e:	54 9b       	sbis	0x0a, 4	; 10
 190:	02 c0       	rjmp	.+4      	; 0x196 <UART_u8Init+0xe>
 * Arguments   : void
 * return      : UART_Init_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	01 c0       	rjmp	.+2      	; 0x198 <UART_u8Init+0x10>
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
		 u8ErrorState = UART_Init_Error ;
 196:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Send enable config*/
	SET_BIT(UCSRB_REG,TXEN_BIT);
 198:	9a b1       	in	r25, 0x0a	; 10
 19a:	98 60       	ori	r25, 0x08	; 8
 19c:	9a b9       	out	0x0a, r25	; 10
	if ( GET_BIT(UCSRB_REG,TXEN_BIT) == 0 )
 19e:	53 9b       	sbis	0x0a, 3	; 10
		u8ErrorState = UART_Init_Error ;
 1a0:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Load configuration values in UCSrC Register*/
	/*Set URSEL to access UCSRC Reg*/
	SET_BIT(UCSRC_REG,URSEL_BIT);
 1a2:	90 b5       	in	r25, 0x20	; 32
 1a4:	90 68       	ori	r25, 0x80	; 128
 1a6:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) == 0 )
 1a8:	57 9b       	sbis	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 1aa:	81 e8       	ldi	r24, 0x81	; 129
		
	/*ASynchronization mode*/				  
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
 1ac:	90 b5       	in	r25, 0x20	; 32
 1ae:	9f 7b       	andi	r25, 0xBF	; 191
 1b0:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,UMSEL_BIT) != 0 )
 1b2:	56 99       	sbic	0x0a, 6	; 10
		u8ErrorState = UART_Init_Error ;
 1b4:	81 e8       	ldi	r24, 0x81	; 129
		
	/*Parity Mode config*/
	UCSRC_REG|=(UART_PARITY<<4);
 1b6:	90 b5       	in	r25, 0x20	; 32
 1b8:	90 bd       	out	0x20, r25	; 32
		 
	/*Stop Bits config*/
	ASSIGN_BIT(UCSRC_REG,USBS_BIT,UART_STOP_BIT_NO);
 1ba:	90 b5       	in	r25, 0x20	; 32
 1bc:	97 7f       	andi	r25, 0xF7	; 247
 1be:	90 bd       	out	0x20, r25	; 32
		 
	/*Character size config*/
	if (UART_SYMPOL_SIZE != UART_9_BITS)
	{
		 /*config char size(5,6,7,8)*/
		 UCSRC_REG |= (UART_SYMPOL_SIZE<<1);
 1c0:	90 b5       	in	r25, 0x20	; 32
 1c2:	96 60       	ori	r25, 0x06	; 6
 1c4:	90 bd       	out	0x20, r25	; 32
	}
	/*end of char size check*/
			 
	/*Baud Rate Value Config*/
	// URSEL BIT must be 0 to can write on UBRR Register
	CLR_BIT(UCSRC_REG,URSEL_BIT);
 1c6:	90 b5       	in	r25, 0x20	; 32
 1c8:	9f 77       	andi	r25, 0x7F	; 127
 1ca:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) != 0 )
 1cc:	57 99       	sbic	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 1ce:	81 e8       	ldi	r24, 0x81	; 129
	// set the  baud rate 	
	UBRRH_REG = 0 ;
 1d0:	10 bc       	out	0x20, r1	; 32
	UBRRL_REG = UART_BAUDRATE;
 1d2:	93 e3       	ldi	r25, 0x33	; 51
 1d4:	99 b9       	out	0x09, r25	; 9
	
	return u8ErrorState ;
}
 1d6:	08 95       	ret

000001d8 <UART_u8SendByte>:
 */
uint8_t UART_u8SendByte(uint8_t data)
{
	uint8_t u8ErrorState ;
	/*wait while previous sending is complete*/
	while ( (GET_BIT(UCSRA_REG,UDRE_BIT)) == 0 );
 1d8:	5d 9b       	sbis	0x0b, 5	; 11
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <UART_u8SendByte>
	/*send byte*/
	UDR_REG = data ;
 1dc:	8c b9       	out	0x0c, r24	; 12
	if ( UDR_REG != data )
 1de:	8c b1       	in	r24, 0x0c	; 12
		u8ErrorState = UART_SendByte_Error ;
	return u8ErrorState ;
}
 1e0:	82 e8       	ldi	r24, 0x82	; 130
 1e2:	08 95       	ret

000001e4 <UART_u8ReceiveByte>:
 */
uint8_t UART_u8ReceiveByte(uint8_t * data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// pointer passed to function not equal NULL
	if ( data == NULL )
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <UART_u8ReceiveByte+0x12>
		u8ErrorState = UART_ReceiveByte_Error ;
	else
	{
		/*wait while previous transition is complete*/
		while ( (GET_BIT(UCSRA_REG,RXC_BIT)) == 0 );
 1e8:	5f 9b       	sbis	0x0b, 7	; 11
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <UART_u8ReceiveByte+0x4>
		/*send byte*/
		*data = UDR_REG  ;
 1ec:	2c b1       	in	r18, 0x0c	; 12
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
 * Arguments   : pointer to Char to save the received char 
 * return      : UART_ReceiveByte_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8ReceiveByte(uint8_t * data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
	// pointer passed to function not equal NULL
	if ( data == NULL )
		u8ErrorState = UART_ReceiveByte_Error ;
 1f6:	83 e8       	ldi	r24, 0x83	; 131
		while ( (GET_BIT(UCSRA_REG,RXC_BIT)) == 0 );
		/*send byte*/
		*data = UDR_REG  ;
	}
	return u8ErrorState ;
}
 1f8:	08 95       	ret

000001fa <UART_u8SendString>:
 * Description : Receive character by UART Communication 
 * Arguments   : pointer to string you want to send it 
 * return      : UART_SendString_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8SendString(uint8_t *str)
{
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
	uint8_t u8ErrorState = STD_TYPES_OK ;
 202:	10 e0       	ldi	r17, 0x00	; 0
	// send characters until find the NULL
	while(*str != '\0')
 204:	05 c0       	rjmp	.+10     	; 0x210 <UART_u8SendString+0x16>
	{
		// send character by charcter
		if ( UART_u8SendByte(*str) != STD_TYPES_OK )
 206:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_u8SendByte>
 20a:	81 11       	cpse	r24, r1
			u8ErrorState = UART_SendString_Error ;
 20c:	14 e8       	ldi	r17, 0x84	; 132
		str++;
 20e:	21 96       	adiw	r28, 0x01	; 1
 */
uint8_t UART_u8SendString(uint8_t *str)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// send characters until find the NULL
	while(*str != '\0')
 210:	88 81       	ld	r24, Y
 212:	81 11       	cpse	r24, r1
 214:	f8 cf       	rjmp	.-16     	; 0x206 <UART_u8SendString+0xc>
		if ( UART_u8SendByte(*str) != STD_TYPES_OK )
			u8ErrorState = UART_SendString_Error ;
		str++;
	}
	return u8ErrorState ;
}
 216:	81 2f       	mov	r24, r17
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	08 95       	ret

00000220 <UART_u8ReceiveString>:
 * Description : Receive character by UART Communication 
 * Arguments   : pointer to string to save string in it  
 * return      : UART_ReceiveString_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8ReceiveString(uint8_t *str)
{
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	8c 01       	movw	r16, r24
	uint8_t index = 0 ;
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// receive the first byte 
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
 22a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_u8ReceiveByte>
 22e:	81 11       	cpse	r24, r1
 230:	02 c0       	rjmp	.+4      	; 0x236 <UART_u8ReceiveString+0x16>
 * return      : UART_ReceiveString_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8ReceiveString(uint8_t *str)
{
	uint8_t index = 0 ;
	uint8_t u8ErrorState = STD_TYPES_OK ;
 232:	d0 e0       	ldi	r29, 0x00	; 0
 234:	01 c0       	rjmp	.+2      	; 0x238 <UART_u8ReceiveString+0x18>
	// receive the first byte 
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
		u8ErrorState = UART_ReceiveString_Error ;
 236:	d5 e8       	ldi	r29, 0x85	; 133
	// receive byte by byte until find CR
	while(str[index] != 0x0D )						// enter terminator for terminal = 0x0D ( Carriage return )
	{
		index++;
		if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
			u8ErrorState = UART_ReceiveString_Error ;
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	08 c0       	rjmp	.+16     	; 0x24c <UART_u8ReceiveString+0x2c>
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
		u8ErrorState = UART_ReceiveString_Error ;
	// receive byte by byte until find CR
	while(str[index] != 0x0D )						// enter terminator for terminal = 0x0D ( Carriage return )
	{
		index++;
 23c:	cf 5f       	subi	r28, 0xFF	; 255
		if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
 23e:	c8 01       	movw	r24, r16
 240:	8c 0f       	add	r24, r28
 242:	91 1d       	adc	r25, r1
 244:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_u8ReceiveByte>
 248:	81 11       	cpse	r24, r1
			u8ErrorState = UART_ReceiveString_Error ;
 24a:	d5 e8       	ldi	r29, 0x85	; 133
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// receive the first byte 
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
		u8ErrorState = UART_ReceiveString_Error ;
	// receive byte by byte until find CR
	while(str[index] != 0x0D )						// enter terminator for terminal = 0x0D ( Carriage return )
 24c:	f8 01       	movw	r30, r16
 24e:	ec 0f       	add	r30, r28
 250:	f1 1d       	adc	r31, r1
 252:	80 81       	ld	r24, Z
 254:	8d 30       	cpi	r24, 0x0D	; 13
 256:	91 f7       	brne	.-28     	; 0x23c <UART_u8ReceiveString+0x1c>
	{
		index++;
		if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
			u8ErrorState = UART_ReceiveString_Error ;
	}
	str[index] = '\0';
 258:	10 82       	st	Z, r1
	return u8ErrorState ;
 25a:	8d 2f       	mov	r24, r29
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <_exit>:
 266:	f8 94       	cli

00000268 <__stop_program>:
 268:	ff cf       	rjmp	.-2      	; 0x268 <__stop_program>
